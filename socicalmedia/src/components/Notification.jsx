import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import '../style/Notification.css';
import Sidebar from "../components/Sidebar";
import Header from "../components/Header";

const NotificationComponent = () => {
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(true);
  const [loading, setLoading] = useState(false);
  const [statusMessage, setStatusMessage] = useState('');
  const [showIntro, setShowIntro] = useState(true);
  const navigate = useNavigate();

  const user = JSON.parse(localStorage.getItem('user'));
  const userId = user?.id;

  const title = "Notification";
  const letters = title.split('');

  useEffect(() => {
    const introTimer = setTimeout(() => {
      setShowIntro(false);
    }, 1800);
    return () => clearTimeout(introTimer);
  }, []);

  useEffect(() => {
    if (!userId) {
      setStatusMessage('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng b√°o.');
      navigate('/login');
      return;
    }

    const fetchNotifications = async () => {
      setLoading(true);
      try {
        const response = await axios.get(`/notifications/${userId}`);
        console.log('Notifications fetched:', response.data);
        setNotifications(response.data);
        setUnreadCount(response.data.filter(n => !n.is_read).length);
        setStatusMessage('');
      } catch (error) {
        console.error('Error fetching notifications:', {
          message: error.message,
          status: error.response?.status,
          data: error.response?.data,
        });
        setStatusMessage(
            error.response?.status === 404
                ? 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o.'
                : 'C√≥ l·ªói x·∫£y ra khi t·∫£i th√¥ng b√°o.'
        );
      } finally {
        setLoading(false);
      }
    };

    fetchNotifications();
    const interval = setInterval(fetchNotifications, 30000);
    return () => clearInterval(interval);
  }, [userId, navigate]);

  const formatTime = (createdAt) => {
    const date = new Date(createdAt);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    if (diffInSeconds < 60) return `${diffInSeconds} gi√¢y tr∆∞·ªõc`;
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
    return date.toLocaleString('vi-VN', { dateStyle: 'short', timeStyle: 'short' });
  };

  const markAsRead = async (id) => {
    setLoading(true);
    try {
      await axios.post(`/notifications/${id}/read`, { user_id: userId });
      setNotifications(notifications.map(notification =>
          notification.id === id ? { ...notification, is_read: true } : notification
      ));
      setUnreadCount(prev => prev - 1);
      setStatusMessage('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc.');
    } catch (error) {
      console.error('Error marking notification as read:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      });
      setStatusMessage('C√≥ l·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc.');
    } finally {
      setLoading(false);
    }
  };

  const markAllAsRead = async () => {
    setLoading(true);
    try {
      await axios.post('/notifications/mark-all-read', { user_id: userId });
      setNotifications(notifications.map(notification => ({ ...notification, is_read: true })));
      setUnreadCount(0);
      setStatusMessage('T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc.');
    } catch (error) {
      console.error('Error marking all notifications as read:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      });
      setStatusMessage('C√≥ l·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc.');
    } finally {
      setLoading(false);
    }
  };

  const toggleNotifications = async () => {
    if (!userId) {
      setStatusMessage('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o.');
      navigate('/login');
      return;
    }
    setLoading(true);
    try {
      const response = await axios.post('/notifications/settings', {
        user_id: userId,
        enabled: !isNotificationsEnabled,
      });
      setIsNotificationsEnabled(!isNotificationsEnabled);
      setStatusMessage(isNotificationsEnabled ? 'ƒê√£ t·∫Øt th√¥ng b√°o' : 'ƒê√£ b·∫≠t th√¥ng b√°o');
    } catch (error) {
      console.error('Error toggling notifications:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      });
      setStatusMessage(
          error.response?.status === 404
              ? 'Kh√¥ng t√¨m th·∫•y endpoint c√†i ƒë·∫∑t th√¥ng b√°o.'
              : error.response?.status === 401
                  ? 'Kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o.'
                  : 'C√≥ l·ªói khi thay ƒë·ªïi c√†i ƒë·∫∑t th√¥ng b√°o.'
      );
    } finally {
      setLoading(false);
    }
  };

  const deleteNotification = async (id) => {
    setLoading(true);
    try {
      await axios.delete(`/notifications/${id}`, { data: { user_id: userId } });
      setNotifications(notifications.filter(notification => notification.id !== id));
      setUnreadCount(prev => prev - 1);
      setStatusMessage('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c x√≥a.');
    } catch (error) {
      console.error('Error deleting notification:', {
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      });
      setStatusMessage('C√≥ l·ªói khi x√≥a th√¥ng b√°o.');
    } finally {
      setLoading(false);
    }
  };

  const handleNotificationClick = (notification) => {
    if (!userId) {
      setStatusMessage('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng b√°o.');
      navigate('/login');
      return;
    }
    if (notification.notifiable_id) {
      if (notification.notifiable_type === 'post') {
        navigate('/home', {
          state: {
            postId: notification.notifiable_id,
            openComments: notification.notification_content.includes('b√¨nh lu·∫≠n')
          }
        });
        markAsRead(notification.id);
      } else if (notification.notifiable_type === 'user') {
        navigate(`/users/${notification.notifiable_id}`);
        markAsRead(notification.id);
      }
    }
  };

  if (showIntro) {
    return (
        <div className="notification-intro-container">
          <div className="notification-bell">üîî</div>
          <div className="notification-intro-text">
            {letters.map((letter, index) => (
                <span
                    key={index}
                    className="notification-intro-letter"
                    style={{ animationDelay: `${0.5 + index * 0.1}s` }}
                >
              {letter === ' ' ? '\u00A0' : letter}
            </span>
            ))}
          </div>
        </div>
    );
  }

  return (
      <div className="container">
        <Header />
        <Sidebar />
        <div className="notifications-wrapper">
          <div className="notifications-container">
            <div className="notifications-header">
              <div className="fancy-container">
                <div className="fancy-text">Th√¥ng b√°o</div>
                {unreadCount > 0 && <span className="unread-badge">{unreadCount}</span>}
              </div>
              <div className="header-actions">
                <button
                    onClick={markAllAsRead}
                    className="action-btn mark-all-btn"
                    disabled={loading}
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc'}
                </button>
                <button
                    onClick={toggleNotifications}
                    className="action-btn toggle-btn"
                    disabled={loading}
                >
                  {loading ? 'ƒêang x·ª≠ l√Ω...' : isNotificationsEnabled ? 'T·∫Øt th√¥ng b√°o' : 'B·∫≠t th√¥ng b√°o'}
                </button>
              </div>
            </div>
            {statusMessage && <div className="status-message">{statusMessage}</div>}
            <ul className="notifications-list">
              {notifications.length > 0 ? (
                  notifications.map(notification => (
                      <li
                          key={notification.id}
                          className={`notification-item ${notification.is_read ? 'read' : 'unread'}`}
                          onClick={() => handleNotificationClick(notification)}
                      >
                        <div className="notification-content">
                          <div className="notification-icon">
                            {notification.notifiable_type === 'post' && notification.notification_content.includes('th·∫£ c·∫£m x√∫c') ? (
                                {
                                  like: 'üëç',
                                  love: '‚ù§Ô∏è',
                                  haha: 'üòÇ',
                                  wow: 'üò≤',
                                  sad: 'üò¢',
                                  angry: 'üò°',
                                }[notification.notification_content.match(/th·∫£ c·∫£m x√∫c (\w+)/)?.[1]] || 'üòä'
                            ) : notification.notifiable_type === 'post' && notification.notification_content.includes('b√¨nh lu·∫≠n') ? 'üí¨' :
                                notification.notifiable_type === 'user' ? 'üë§' : 'üîî'}
                          </div>
                          <div className="notification-text">
                            <p>{notification.notification_content}</p>
                            <span className="notification-time">{formatTime(notification.created_at)}</span>
                          </div>
                        </div>
                        <div className="notification-actions">
                          <button
                              onClick={(e) => {
                                e.stopPropagation();
                                markAsRead(notification.id);
                              }}
                              className="action-btn mark-read-btn"
                              disabled={loading}
                          >
                            {notification.is_read ? 'ƒê√£ ƒë·ªçc' : 'ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc'}
                          </button>
                          <button
                              onClick={(e) => {
                                e.stopPropagation();
                                deleteNotification(notification.id);
                              }}
                              className="action-btn delete-btn"
                              disabled={loading}
                          >
                            X√≥a
                          </button>
                        </div>
                      </li>
                  ))
              ) : (
                  <p className="no-notifications">Kh√¥ng c√≥ th√¥ng b√°o m·ªõi</p>
              )}
            </ul>
          </div>
        </div>
      </div>
  );
};

export default NotificationComponent;